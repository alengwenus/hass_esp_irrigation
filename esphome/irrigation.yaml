esphome:
  name: irrigation

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

preferences:
  flash_write_interval: 1min

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.2.61
    gateway: 192.168.2.1
    subnet: 255.255.255.0

# Enable logging
logger:

ota:

time:
  - platform: homeassistant
    id: hass_time

globals:
  - id: var_pump_duration
    type: int
    initial_value: "60"
  - id: var_pump_remaining
    type: int
    initial_value: "0"
  - id: var_zone_remainings
    type: int[6]
    initial_value: "{0, 0, 0, 0, 0, 0}"
  - id: var_skip_start_day
    type: int
    restore_value: true
    initial_value: "0"

# Enable Home Assistant API
api:
  reboot_timeout: 0s


button:
  - platform: restart
    id: irrigation_restart
    name: "Irrigation Restart"


binary_sensor:
  # Connection status
  - platform: status
    name: "Irrigation Status"

  # Manual switch sensor
  - platform: gpio
    id: manual_gpio
    pin:
      number: GPIO13
      mode: INPUT_PULLDOWN
    on_click:
      - max_length: 2s
        then:
          - switch.toggle: irrigation_manual
      - min_length: 2s
        max_length: 5s
        then:
          - switch.turn_off: automation_enabled
          - script.execute: turn_off_valves_and_pump
      - min_length: 5s
        max_length: 10s
        then:
          - switch.turn_on: automation_enabled


select:
  - platform: template
    name: "Zone 1 start"
    id: zone1_start
    options: &start_options
      ["00:00", "00:15", "00:30", "00:45",
       "01:00", "01:15", "01:30", "01:45",
       "02:00", "02:15", "02:30", "02:45",
       "03:00", "03:15", "03:30", "03:45",
       "04:00", "04:15", "04:30", "04:45",
       "05:00", "05:15", "05:30", "05:45",
       "06:00", "06:15", "06:30", "06:45",
       "07:00", "07:15", "07:30", "07:45",
       "08:00", "08:15", "08:30", "08:45",
       "09:00", "09:15", "09:30", "09:45",
       "10:00", "10:15", "10:30", "10:45",
       "11:00", "11:15", "11:30", "11:45",
       "12:00", "12:15", "12:30", "12:45",
       "13:00", "13:15", "13:30", "13:45",
       "14:00", "14:15", "14:30", "14:45",
       "15:00", "15:15", "15:30", "15:45",
       "16:00", "16:15", "16:30", "16:45",
       "17:00", "17:15", "17:30", "17:45",
       "18:00", "18:15", "18:30", "18:45",
       "19:00", "19:15", "19:30", "19:45",
       "20:00", "20:15", "20:30", "20:45",
       "21:00", "21:15", "21:30", "21:45",
       "22:00", "22:15", "22:30", "22:45",
       "23:00", "23:15", "23:30", "23:45",
      ]
    initial_option: "20:00"
    optimistic: true
    restore_value: true
  - platform: template
    name: "Zone 2 start"
    id: zone2_start
    options: *start_options
    initial_option: "18:00"
    optimistic: true
    restore_value: true
  - platform: template
    name: "Zone 3 start"
    id: zone3_start
    options: *start_options
    initial_option: "20:30"
    optimistic: true
    restore_value: true
  - platform: template
    name: "Zone 4 start"
    id: zone4_start
    options: *start_options
    initial_option: "19:30"
    optimistic: true
    restore_value: true
  - platform: template
    name: "Zone 5 start"
    id: zone5_start
    options: *start_options
    initial_option: "18:45"
    optimistic: true
    restore_value: true
  - platform: template
    name: "Zone 6 start"
    id: zone6_start
    options: *start_options
    initial_option: "17:15"
    optimistic: true
    restore_value: true


number:
  - platform: template
    id: zone1_duration
    name: "Zone 1 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 30
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_duration
    name: "Zone 2 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 45
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_duration
    name: "Zone 3 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 30
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone4_duration
    name: "Zone 4 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 30
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone5_duration
    name: "Zone 5 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 30
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone6_duration
    name: "Zone 6 duration"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 45
    unit_of_measurement: min
    optimistic: true
    restore_value: true

  - platform: template
    id: time_multiplier
    name: "Time Multiplier"
    step: 1
    min_value: 0
    max_value: 120
    initial_value: 100
    unit_of_measurement: "%"
    optimistic: true
    restore_value: true


  - platform: template
    id: skip_days
    name: "Skip Days"
    step: 1
    min_value: 0
    max_value: 10
    initial_value: 0
    optimistic: true
    restore_value: true
    set_action:
      then:
        - lambda: |-
            id(var_skip_start_day) = id(hass_time).now().timestamp / 86400;

sensor:
  - platform: wifi_signal
    name: "Irrigation Wifi"
    update_interval: 60s

  #
  # Template Sensors
  #
  - platform: template
    id: manual_remaining
    name: "Manual pump remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_pump_remaining);"
  - platform: template
    id: zone1_remaining
    name: "Zone 1 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[0];"
  - platform: template
    id: zone2_remaining
    name: "Zone 2 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[1];"
  - platform: template
    id: zone3_remaining
    name: "Zone 3 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[2];"
  - platform: template
    id: zone4_remaining
    name: "Zone 4 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[3];"
  - platform: template
    id: zone5_remaining
    name: "Zone 5 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[4];"
  - platform: template
    id: zone6_remaining
    name: "Zone 6 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[5];"


switch:
  #
  # Template Switches
  #
  - platform: template
    name: "Irrigation Manual"
    id: irrigation_manual
    lambda: "return id(irrigation_pump).state;"
    turn_on_action:
      - switch.turn_on: irrigation_pump
      - script.execute: manual_pump_wait
      - script.wait: manual_pump_wait
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: manual_pump_wait
      - lambda: |-
          id(var_pump_remaining) = 0;
          id(manual_remaining).update();
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 1"
    id: irrigation_zone1
    lambda: 'return id(irrigation_channel1).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel1
      - switch.turn_on: irrigation_pump
      - script.execute: zone1_wait
      - script.wait: zone1_wait
      - switch.turn_off: irrigation_channel1
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone1_wait
      - lambda: |-
          id(var_zone_remainings)[0] = 0;
          id(zone1_remaining).update();
      - switch.turn_off: irrigation_channel1
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 2"
    id: irrigation_zone2
    lambda: 'return id(irrigation_channel2).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel2
      - switch.turn_on: irrigation_pump
      - script.execute: zone2_wait
      - script.wait: zone2_wait
      - switch.turn_off: irrigation_channel2
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone2_wait
      - lambda: |-
          id(var_zone_remainings)[1] = 0;
          id(zone2_remaining).update();
      - switch.turn_off: irrigation_channel2
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 3"
    id: irrigation_zone3
    lambda: 'return id(irrigation_channel3).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel3
      - switch.turn_on: irrigation_pump
      - script.execute: zone3_wait
      - script.wait: zone3_wait
      - switch.turn_off: irrigation_channel3
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone3_wait
      - lambda: |-
          id(var_zone_remainings)[2] = 0;
          id(zone3_remaining).update();
      - switch.turn_off: irrigation_channel3
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 4"
    id: irrigation_zone4
    lambda: 'return id(irrigation_channel4).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel4
      - switch.turn_on: irrigation_pump
      - script.execute: zone4_wait
      - script.wait: zone4_wait
      - switch.turn_off: irrigation_channel4
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone4_wait
      - lambda: |-
          id(var_zone_remainings)[3] = 0;
          id(zone4_remaining).update();
      - switch.turn_off: irrigation_channel4
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 5"
    id: irrigation_zone5
    lambda: 'return id(irrigation_channel5).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel5
      - switch.turn_on: irrigation_pump
      - script.execute: zone5_wait
      - script.wait: zone5_wait
      - switch.turn_off: irrigation_channel5
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone5_wait
      - lambda: |-
          id(var_zone_remainings)[4] = 0;
          id(zone5_remaining).update();
      - switch.turn_off: irrigation_channel5
      - script.execute: turn_off_pump_if_valves_are_closed

  - platform: template
    name: "Irrigation Zone 6"
    id: irrigation_zone6
    lambda: 'return id(irrigation_channel6).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel6
      - switch.turn_on: irrigation_pump
      - script.execute: zone6_wait
      - script.wait: zone6_wait
      - switch.turn_off: irrigation_channel6
      - script.execute: turn_off_pump_if_valves_are_closed
    turn_off_action:
      - script.stop: zone6_wait
      - lambda: |-
          id(var_zone_remainings)[5] = 0;
          id(zone6_remaining).update();
      - switch.turn_off: irrigation_channel6
      - script.execute: turn_off_pump_if_valves_are_closed


  - platform: template
    name: "Zone 1 enabled"
    id: zone1_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Zone 2 enabled"
    id: zone2_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Zone 3 enabled"
    id: zone3_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Zone 4 enabled"
    id: zone4_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Zone 5 enabled"
    id: zone5_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Zone 6 enabled"
    id: zone6_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "Automation enabled"
    id: automation_enabled
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  #
  # GPIO Switches
  #
  - platform: gpio
    name: "Irrigation Pump"
    id: irrigation_pump
    pin: GPIO12
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel6
    pin: GPIO32
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel5
    pin: GPIO33
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel4
    pin: GPIO25
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel3
    pin: GPIO26
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel2
    pin: GPIO27
    inverted: true

  - platform: gpio
    id: irrigation_channel1
    pin: GPIO14
    inverted: true
    restore_mode: ALWAYS_OFF


#
# Scripts
#
script:
  - id: turn_off_pump_if_valves_are_closed
    then:
      - if:
          condition:
            and:
              - switch.is_off: irrigation_channel1
              - switch.is_off: irrigation_channel2
              - switch.is_off: irrigation_channel3
              - switch.is_off: irrigation_channel4
              - switch.is_off: irrigation_channel5
              - switch.is_off: irrigation_channel6
          then:
            - if:
                condition:
                  not:
                    script.is_running: manual_pump_wait
                then:
                  - switch.turn_off: irrigation_pump
                  - script.stop: manual_pump_wait

  - id: turn_off_valves_and_pump
    then:
      - switch.turn_off: irrigation_manual
      - switch.turn_off: irrigation_zone1
      - switch.turn_off: irrigation_zone2
      - switch.turn_off: irrigation_zone3
      - switch.turn_off: irrigation_zone4
      - switch.turn_off: irrigation_zone5
      - switch.turn_off: irrigation_zone6

  - id: manual_pump_wait
    then:
      - lambda: |-
          id(var_pump_remaining) = id(var_pump_duration);
          id(manual_remaining).update();
      - while:
          condition:
            lambda: "return id(var_pump_remaining) > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_pump_remaining) -= 1;
                id(manual_remaining).update();
  - id: zone1_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[0] = id(zone1_duration).state  * id(time_multiplier).state / 100;
          id(zone1_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[0] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[0] -= 1;
                id(zone1_remaining).update();
  - id: zone2_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[1] = id(zone2_duration).state  * id(time_multiplier).state / 100;
          id(zone2_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[1] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[1] -= 1;
                id(zone2_remaining).update();
  - id: zone3_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[2] = id(zone3_duration).state  * id(time_multiplier).state / 100;
          id(zone3_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[2] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[2] -= 1;
                id(zone3_remaining).update();
  - id: zone4_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[3] = id(zone4_duration).state  * id(time_multiplier).state / 100;
          id(zone4_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[3] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[3] -= 1;
                id(zone4_remaining).update();
  - id: zone5_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[4] = id(zone5_duration).state  * id(time_multiplier).state / 100;
          id(zone5_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[4] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[4] -= 1;
                id(zone5_remaining).update();
  - id: zone6_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[5] = id(zone6_duration).state  * id(time_multiplier).state / 100;
          id(zone6_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[5] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[5] -= 1;
                id(zone6_remaining).update();

#
# Time automations
#
interval:
  - interval: 1sec
    then:
      - lambda: |-
          // automation overall switch
          if (!id(automation_enabled).state) return;

          // skip days
          int current_day = id(hass_time).now().timestamp / 86400;
          if ((current_day - id(var_skip_start_day)) % ((int)id(skip_days).state + 1) != 0) return;

          // time based
          if (id(zone1_enabled).state &&
            !id(irrigation_zone1).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone1_start).state)
              id(irrigation_zone1).turn_on();
          if (id(zone2_enabled).state &&
            !id(irrigation_zone2).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone2_start).state)
              id(irrigation_zone2).turn_on();
          if (id(zone3_enabled).state &&
            !id(irrigation_zone3).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone3_start).state)
              id(irrigation_zone3).turn_on();
          if (id(zone4_enabled).state &&
            !id(irrigation_zone4).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone4_start).state)
              id(irrigation_zone4).turn_on();
          if (id(zone5_enabled).state &&
            !id(irrigation_zone5).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone5_start).state)
              id(irrigation_zone5).turn_on();
          if (id(zone6_enabled).state &&
            !id(irrigation_zone6).state &&
            id(hass_time).now().strftime("%H:%M") == id(zone6_start).state)
              id(irrigation_zone6).turn_on();
